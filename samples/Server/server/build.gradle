buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        //maven {
            //url = uri("https://plugins.gradle.org/m2/")
        //}
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.3'

        classpath 'javax.servlet:javax.servlet-api:3.0.1'
        classpath 'org.gretty:gretty:4.1.3'
        //classpath 'org.akhikhl.gretty:gretty:2.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.gretty'
//apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.google.protobuf'


import org.apache.tools.ant.taskdefs.condition.Os
import groovy.transform.Field

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        proto {
            // In addition to the default 'src/main/proto'
            srcDir 'src/main/proto'
        }
    }
}

/*
task jettyRun {
    contextPath = '/'
    httpPort = 8080    // Port for test
    stopPort = 9090
    stopKey = 'stopKey'
}

task jettyStop {
    stopPort = 9090
    stopKey = 'stopKey'
}
*/

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.17.3'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
    //generatedFilesBaseDir = "$projectDir/src/main/java"
}

//apply plugin: 'com.android.application'

dependencies {
    testCompileOnly 'junit:junit:4.11'
    testCompileOnly 'org.glassfish.jersey.core:jersey-client:2.14'
    testCompileOnly 'commons-codec:commons-codec:1.9'

    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'
    // implementation 'com.google.protobuf:protobuf-java:2.6.1'
    implementation 'com.google.protobuf:protobuf-javalite:3.17.3'
    implementation 'commons-codec:commons-codec:1.9'
    implementation 'org.apache.commons:commons-lang3:3.1'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'io.netty:netty-all:4.0.4.Final'
    implementation 'org.xerial:sqlite-jdbc:3.7.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.16.0'
}


//tasks.withType(Copy){
 //   filesMatching("**/*.proto") {
 //       duplicatesStrategy = DuplicatesStrategy.INCLUDE
 //   }
//}


//import org.akhikhl.gretty.AppStartTask
//import org.akhikhl.gretty.AppStopTask

gretty {
    httpPort = 8080
    contextPath = "/"
    debugPort = 5005	// default
    debugSuspend = true // default
    // servletContainer = 'jetty9.4'
    //httpsEnabled = true
    //managedClassReload=true // 修改了类之后重新加载
    //servletContainer = 'tomcat8' //如果不指定默认的servlet容器，支持tomcat7/8，默认是使用的是Jetty服务器
    //httpsPort = 4431
}

task nettyRun(type: JavaExec, dependsOn: ['classes']) {
    main = 'com.tencent.mars.proxy.ProxyServer'
    classpath = sourceSets.main.runtimeClasspath
}



def createStartScript(int serverType) {
    def WEBSERVER = 1;
    def PROXYSERVER = 2;

    def reversePort = serverType == WEBSERVER ? 8081 : 8080;
    def fileName = serverType == WEBSERVER ? "start-web-server" : "start-proxy-server";
    def runtty = serverType == WEBSERVER ? "appRun" : "nettyRun";

    def cmdFile;
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        cmdFile = "${buildDir}/tmp/" + fileName + ".bat" as File
    }
    else if (Os.isFamily(Os.FAMILY_MAC)) {
        cmdFile = "${buildDir}/tmp/" + fileName + ".command" as File
    }
    else {
        cmdFile = "${buildDir}/tmp/" + fileName + ".sh" as File
    }

    cmdFile.delete();
    cmdFile.createNewFile();

    cmdFile.append("adb reverse --remove tcp:" + reversePort + "\n")
    cmdFile.append("adb reverse tcp:" + reversePort + " tcp:" + reversePort + "\n")
    cmdFile.append("cd ${rootDir}\n")

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        cmdFile.append(rootDir.getAbsolutePath().substring(0, rootDir.getAbsolutePath().indexOf(":") + 1) + "\n")
        cmdFile.append("gradlew.bat " + runtty)
    }
    else if(Os.isFamily(Os.FAMILY_MAC)) {
        cmdFile.append("./gradlew " + runtty)
        print "chmod a+x ${cmdFile}".execute().text
        print "open ${cmdFile}".execute().text
    }
    else if(Os.isFamily(Os.FAMILY_UNIX)) {
        cmdFile.append("./gradlew " + runtty + "\n")
    }


}

task startWebServer(dependsOn: ['compileJava']) {
    def WEBSERVER = 1;
    def PROXYSERVER = 2;
    doLast {
        createStartScript(WEBSERVER)
    }
}

task startProxyServer(dependsOn: 'startWebServer') {
    def WEBSERVER = 1;
    def PROXYSERVER = 2;
    doLast {
        createStartScript(PROXYSERVER)

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def cmdFile = "${buildDir}/tmp/start.bat" as File
            cmdFile.delete()
            cmdFile.createNewFile()

            cmdFile.append("cd ${buildDir}/tmp/\n")
            cmdFile.append("start start-proxy-server.bat\n")
            cmdFile.append("start start-web-server.bat\n")
            print "${cmdFile}".execute().text
        }
        else if (Os.isFamily(Os.FAMILY_MAC)) {

        }
        else if (Os.isFamily(Os.FAMILY_UNIX)) {
            def cmdFile = "${buildDir}/tmp/start.sh" as File
            cmdFile.delete()
            cmdFile.createNewFile()

            cmdFile.append("cd ${buildDir}/tmp/\n")

            cmdFile.append("chmod a+x start-proxy-server.sh && nohup ./start-proxy-server.sh > proxyRun.log 2>&1 &\n")
            cmdFile.append("chmod a+x start-web-server.sh && nohup ./start-web-server.sh > webRun.log 2>&1 &\n")
            print "chmod a+x ${cmdFile}".execute().text
            print "${cmdFile}".execute().text
        }
    }
}

/*
task clean(dependsOn: 'jettyStop') << {
}
*/